<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">


		<!-- CHANGEME make a local copy of this file, remove the 'changeme' from the file name
			add db specific info here -->
	    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="oracle.jdbc.pool.OracleConnectionPoolDataSource" />
        <property name="url" value="jdbc:oracle:thin:@host:1521:servicename" />
        <property name="username" value="username" />
        <property name="password" value="password" />
    </bean>

	<!-- Cache of organization hierarchies by id -->
	<bean id="organizationHierarchyCache"
		class="org.eurekastreams.server.persistence.mappers.cache.OrganizationHierarchyCache">
		<property name="cache" ref="testCache" />
		<property name="getOrganizationsByShortNames" ref="bulkOrganizationsByShortNameMapper" />
		<property name="getRecursiveChildOrgIdsMapper" ref="getChildOrgIdsRecursiveByOrgIdDbMapper" />
		<property name="getRecursiveParentOrgIdsMapper" ref="getRecursiveParentOrgIdsMapper" />
		<property name="getOrganizationsByShortNamesMapper" ref="bulkOrganizationsByShortNameMapper" />
	</bean>

	<bean id="queryOptimizer" class="org.eurekastreams.commons.hibernate.QueryOptimizer" />

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
				<property name="databasePlatform" value="org.hibernate.dialect.custom.CustomOracle10gDialect" />
			</bean>
		</property>
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.cache.use_second_level_cache" value="false" />
				<entry key="hibernate.cache.use_query_cache" value="false" />
				<entry key="hibernate.cache.provider_class" value="net.sf.ehcache.hibernate.SingletonEhCacheProvider" />
				<entry key="hibernate.show_sql" value="true" />
				<entry key="hibernate.use_sql_comments" value="false" />
				<entry key="hibernate.format_sql" value="false" />
				<entry key="hibernate.dialect" value="org.hibernate.dialect.custom.CustomOracle10gDialect" />
				<entry key="hibernate.query.substitutions" value="true 1, false 0, 'true' 1, 'false' 0" />
                

				<entry key="hibernate.search.default.optimizeroperation_limit.max"
					value="10000" />
				<!--
					For unit tests, we'll use the stock Hibernate RAMDirectoryProvider
					to improve performance for unit testing. The
					CompositeDirectoryProvider should be used in production so that the
					index is writing to RAM and filesystem at the same time. <entry
					key="hibernate.search.default.directory_provider"
					value="org.hibernate.search.store.RAMDirectoryProvider" />
				-->
				<entry key="hibernate.search.default.directory_provider"
					value="org.hibernate.search.store.RAMDirectoryProvider" />
			</map>
		</property>
	</bean>

	<bean id="descendantOrgStrategy"
		class="org.eurekastreams.server.persistence.strategies.DescendantOrganizationStrategy">
	</bean>

	<bean id="jpaGroupMapper" class="org.eurekastreams.server.persistence.DomainGroupMapper">
		<constructor-arg ref="queryOptimizer" />
		<property name="descendantOrgStrategy" ref="descendantOrgStrategy" />
	</bean>
	<bean id="jpaOrganizationMapper" class="org.eurekastreams.server.persistence.OrganizationMapper">
		<constructor-arg ref="queryOptimizer" />
		<property name="descendantOrgStrategy" ref="descendantOrgStrategy" />
	</bean>
	<bean id="jpaPersonMapper" class="org.eurekastreams.server.persistence.PersonMapper">
		<constructor-arg ref="queryOptimizer" />
		<property name="descendantOrgStrategy" ref="descendantOrgStrategy" />
	</bean>
	<bean id="jpaPluginDefinitionMapper" class="org.eurekastreams.server.persistence.PluginDefinitionMapper">
        <constructor-arg ref="queryOptimizer" />
    </bean>
	<bean id="jpaTabGroupMapper" class="org.eurekastreams.server.persistence.TabGroupMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaTabMapper" class="org.eurekastreams.server.persistence.TabMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaGadgetMapper" class="org.eurekastreams.server.persistence.GadgetMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaGadgetDefinitionMapper" class="org.eurekastreams.server.persistence.GadgetDefinitionMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaThemeMapper" class="org.eurekastreams.server.persistence.ThemeMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaPersistentLoginMapper" class="org.eurekastreams.server.persistence.PersistentLoginMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaAppDataMapper" class="org.eurekastreams.server.persistence.AppDataMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaAppDataValueMapper" class="org.eurekastreams.server.persistence.AppDataValueMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaBackgroundMapper" class="org.eurekastreams.server.persistence.BackgroundMapper">
		<constructor-arg ref="queryOptimizer" />
		<constructor-arg ref="jpaPersonMapper" />
	</bean>
	<bean id="jpaJobMapper" class="org.eurekastreams.server.persistence.JobMapper">
		<constructor-arg ref="queryOptimizer" />
		<constructor-arg ref="jpaPersonMapper" />
	</bean>
	<bean id="jpaEnrollmentMapper" class="org.eurekastreams.server.persistence.EnrollmentMapper">
		<constructor-arg ref="queryOptimizer" />
		<constructor-arg ref="jpaPersonMapper" />
	</bean>
	<bean id="jpaGalleryItemCategoryMapper" class="org.eurekastreams.server.persistence.GalleryItemCategoryMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	<bean id="jpaRecommendationMapper" class="org.eurekastreams.server.persistence.RecommendationMapper">
		<constructor-arg ref="queryOptimizer" />
	</bean>
	
    <bean id="getOrganizationProxyById" class="org.eurekastreams.server.persistence.mappers.db.GetOrganizationProxyById" />
    
    <bean id="getPersonIdsByLockedStatus" class="org.eurekastreams.server.persistence.mappers.db.GetPersonIdsByLockedStatus" />
    
    <bean id="setPersonLockedStatus" class="org.eurekastreams.server.persistence.mappers.db.SetPersonLockedStatus" />	

	<bean
		class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>
